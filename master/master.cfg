# -*- python -*-
# ex: set filetype=python:

from subprocess import check_output

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [
    worker.Worker("bsd-worker", "pass", max_builds=1),
    worker.Worker("bsd-worker2", "pass", max_builds=1),
]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {
    'pb': {'port': 9989},
}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

# comment out this if webhook is not available
# c['change_source'] = [
#     changes.GitPoller(
#         'git://github.com/JuliaLang/julia.git',
#         workdir='poller',
#         branch='master',
#         pollinterval=300),
# ]

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = [
    schedulers.SingleBranchScheduler(
        name="master",
        change_filter=util.ChangeFilter(branch='master'),
        treeStableTimer=60,
        builderNames=["11rel-amd64"]),

    schedulers.ForceScheduler(
        name="force",
        builderNames=["11rel-amd64"]),

    # schedulers.Try_Userpass(
    #     name='try',
    #     port=5555,
    #     userpass=[('user','pass')],
    #     builderNames=["11rel-amd64"]),

    schedulers.SingleBranchScheduler(
        name='pull-request',
        change_filter=util.ChangeFilter(
            branch_re='^refs/pull/.*',
            repository_re='https://github.com/[\w]+/julia'),
        builderNames=['11rel-amd64'],
        treeStableTimer=10,
    ),
]

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.


# not used now
@util.renderer
def jl_test_jobs(props):
    worker = props.getProperty('workername')
    make_jobs = props.getProperty('make_jobs', default=2)
    jobs = 8 if worker == 'gungnir' else make_jobs

    return [
        'env', 'JULIA_CPU_CORES={}'.format(jobs),
        'gmake', 'testall', 'test-download', 'test-pkg', 'test-libgit2-online']

###############################################################################
#  factory
###############################################################################

factory = util.BuildFactory()
# check out the source
factory.addSteps([
    steps.BSDSysInfo(),
    steps.BSDSetMakeVar(['make_jobs'], ['MAKE_JOBS_NUMBER']),

    steps.ShellCommand(
        name='cleanup stdlib',
        command=['rm', '-rvf', 'stdlib']
    ),

    steps.GitHub(
        repourl='git://github.com/JuliaLang/julia.git',
        mode='full',
        method='clean'),

    steps.ShellCommand(
        name='cleanall',
        # this will not remove `deps`, let's cache it
        command=['gmake', 'cleanall'],
    ),

    steps.Compile(
        command=['./.freebsdci.sh', 'compile'],
        env={
            'WORKERNAME': util.Property('workername'),
            'MAKE_JOBS_NUMBER': util.Property('make_jobs'),
        },
    ),

    steps.ShellCommand(
        name='build-stats',
        command=['./.freebsdci.sh', 'build-state'],
    ),

    steps.Test(
        command=['./.freebsdci.sh', 'runtests'],
        env={
            'WORKERNAME': util.Property('workername'),
            'MAKE_JOBS_NUMBER': util.Property('make_jobs'),
        },
        timeout=1200,  # 20 min
    ),

    steps.ShellCommand(
        name='test embedding',
        command=['./.freebsdci.sh', 'test-embedding'],
        env={
            'WORKERNAME': util.Property('workername'),
            'MAKE_JOBS_NUMBER': util.Property('make_jobs'),
        },
    ),
])

###############################################################################
#  test factory
###############################################################################

test_factory = util.BuildFactory()
# check out the source
test_factory.addSteps([
    steps.BSDSysInfo(),
    steps.BSDSetMakeVar(['make_jobs'], ['MAKE_JOBS_NUMBER']),

    steps.ShellCommand(
        name='cleanup stdlib',
        command=['rm', '-rvf', 'stdlib']
    ),

    steps.GitHub(
        repourl='git://github.com/JuliaLang/julia.git',
        mode='full',
        method='clean'),

    steps.ShellCommand(
        name='cleanall',
        # this will not remove `deps`, let's cache it
        command=['gmake', 'cleanall'],
    ),

    steps.Compile(
        command=[
            '/bin/sh', '-c',
            './.freebsdci.sh compile || '
            'gmake all -j $MAKE_JOBS_NUMBER'],
        env={
            'WORKERNAME': util.Property('workername'),
            'MAKE_JOBS_NUMBER': util.Property('make_jobs'),
            'MALLOC_CONF': 'junk:false',  # remove if script only
            'VERBOSE': '1',               # remove if script only
            'FORCE_ASSERTIONS': '1',      # remove if script only
            'LLVM_ASSERTIONS': '1',       # remove if script only
        },
    ),

    steps.ShellCommand(
        name='build-stats',
        command=[
            '/bin/sh', '-c',
            './.freebsdci.sh build-state || gmake build-stats'],
    ),

    steps.Test(
        command=[
            '/bin/sh', '-c',
            './.freebsdci.sh runtests || '
            'gmake testall test-download test-pkg test-libgit2-online'],
        env={
            'WORKERNAME': util.Property('workername'),
            'MAKE_JOBS_NUMBER': util.Property('make_jobs'),

            'JULIA_CPU_CORES': util.Property('make_jobs'), # remove if script only
            'JULIA_TEST_MAXRSS_MB': '600',  # remove if script only
            'VERBOSE': '1',                 # remove if script only
            'FORCE_ASSERTIONS': '1',        # remove if script only
            'LLVM_ASSERTIONS': '1',         # remove if script only
        },
        timeout=1200,  # 20 min
    ),

    steps.ShellCommand(
        name='test embedding',
        command=[
            '/bin/sh', '-c',
            './.freebsdci.sh test-embedding || '
            '('
                'mkdir -vp tmp &&'
                'gmake -C examples/embedding check'
            ')'],
        env={
            'WORKERNAME': util.Property('workername'),
            'JULIA': '../../julia',
            'BIN': '../../tmp',
        },
    ),
])

c['builders'] = [
    util.BuilderConfig(
        name="11rel-amd64",
        workernames=["gaebolg", "gungnir", "ionic"],
        factory=factory),

    util.BuilderConfig(
        name='test-build',
        workernames=['test-worker'],
        factory=test_factory),
]

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.


c['services'] = [
    reporters.GitHubStatusPush(
        token=token,
        context='julia freebsd ci',
        startDescription='Build started',
        endDescription='Build done'),
]

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Julia"
c['titleURL'] = "https://github.com/JuliaLang/julia"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

# c['buildbotURL'] = "https://julia.iblis.cnmc.tw/"
c['buildbotURL'] = "https://freebsdci.julialang.org/"

# minimalistic config to activate new web UI
c['www'] = {
    'port': 19900,
    'plugins': dict(waterfall_view={}, console_view={}),
    'versions': [
        ('OS', check_output(['uname', '-a'])),
    ],
    'logfileName': 'log/http.log',

    'change_hook_dialects': {
        'github': {
            # 'secret': 'MY-SECRET',
            # 'strict': True
        }
    },
}

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
